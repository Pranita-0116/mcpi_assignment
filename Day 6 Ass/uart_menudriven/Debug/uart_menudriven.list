
uart_menudriven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800032c  08000334  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800032c  0800032c  00001334  2**0
                  CONTENTS
  4 .ARM          00000000  0800032c  0800032c  00001334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800032c  08000334  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800032c  0800032c  0000132c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000330  08000330  00001330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001334  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000de8  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000370  00000000  00000000  00002146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  000024b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000071  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e95  00000000  00000000  000025d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f1e  00000000  00000000  0000346e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd0f  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009009b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000150  00000000  00000000  000900e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  00090230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  0009024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000314 	.word	0x08000314

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000314 	.word	0x08000314

080001c8 <main>:

/*
Orange LED will blink when switch is pressed -- Any Optimization Level
As flag is declared volatile.
*/
int main(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	    int i = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
	     while(1)
	    	while(SwitchExtiFlag==0);
 80001d2:	bf00      	nop
 80001d4:	4b02      	ldr	r3, [pc, #8]	@ (80001e0 <main+0x18>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d0fb      	beq.n	80001d4 <main+0xc>
 80001dc:	e7f9      	b.n	80001d2 <main+0xa>
 80001de:	bf00      	nop
 80001e0:	2000001c 	.word	0x2000001c

080001e4 <EXTI0_IRQHandler>:
// Global SwitchExtiFlag
volatile uint32_t SwitchExtiFlag = 0;

// intr handler(ISR) written with exactly same name as of handler fn name in vector table.
// it overrides the WEAK function written in startup.S
void EXTI0_IRQHandler(void) {
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	// acknowledge the interrupt
	EXTI->PR |= BV(SWITCH_EXTI);
 80001e8:	4b06      	ldr	r3, [pc, #24]	@ (8000204 <EXTI0_IRQHandler+0x20>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	4a05      	ldr	r2, [pc, #20]	@ (8000204 <EXTI0_IRQHandler+0x20>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6153      	str	r3, [r2, #20]
	// interrupt handling logic
	// bad programming practice -- to write a code that take long time to execute (blocking code)
	//LedBlink(LED_BLUE_PIN, 1000);
	// bad programming practice -- non-blocking code
	SwitchExtiFlag = 1;
 80001f4:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <EXTI0_IRQHandler+0x24>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	601a      	str	r2, [r3, #0]
	/*
	LDR r8, =SwitchExtiFlag 	// r8 = &SwitchExtiFlag;
	MOV r1, #1					// r1 = 1;
	STR r1, [r8]				// *r8 = r1;
	*/
}
 80001fa:	bf00      	nop
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40013c00 	.word	0x40013c00
 8000208:	2000001c 	.word	0x2000001c

0800020c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000210:	f000 f802 	bl	8000218 <DWT_Init>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800021c:	4b14      	ldr	r3, [pc, #80]	@ (8000270 <DWT_Init+0x58>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	4a13      	ldr	r2, [pc, #76]	@ (8000270 <DWT_Init+0x58>)
 8000222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000226:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000228:	4b11      	ldr	r3, [pc, #68]	@ (8000270 <DWT_Init+0x58>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a10      	ldr	r2, [pc, #64]	@ (8000270 <DWT_Init+0x58>)
 800022e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000232:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000234:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <DWT_Init+0x5c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0e      	ldr	r2, [pc, #56]	@ (8000274 <DWT_Init+0x5c>)
 800023a:	f023 0301 	bic.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000240:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <DWT_Init+0x5c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0b      	ldr	r2, [pc, #44]	@ (8000274 <DWT_Init+0x5c>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <DWT_Init+0x5c>)
 800024e:	2200      	movs	r2, #0
 8000250:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000252:	bf00      	nop
    __ASM volatile ("NOP");
 8000254:	bf00      	nop
    __ASM volatile ("NOP");
 8000256:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <DWT_Init+0x5c>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	2b00      	cmp	r3, #0
 800025e:	bf0c      	ite	eq
 8000260:	2301      	moveq	r3, #1
 8000262:	2300      	movne	r3, #0
 8000264:	b2db      	uxtb	r3, r3
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000edf0 	.word	0xe000edf0
 8000274:	e0001000 	.word	0xe0001000

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	@ (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f7ff ffc6 	bl	800020c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	@ (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	@ (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	@ (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	@ (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f811 	bl	80002cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ff8d 	bl	80001c8 <main>

080002ae <LoopForever>:

LoopForever:
  b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000334 	.word	0x08000334
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	20000020 	.word	0x20000020

080002c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC_IRQHandler>
	...

080002cc <__libc_init_array>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000304 <__libc_init_array+0x38>)
 80002d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000308 <__libc_init_array+0x3c>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	2600      	movs	r6, #0
 80002d8:	42a6      	cmp	r6, r4
 80002da:	d109      	bne.n	80002f0 <__libc_init_array+0x24>
 80002dc:	4d0b      	ldr	r5, [pc, #44]	@ (800030c <__libc_init_array+0x40>)
 80002de:	4c0c      	ldr	r4, [pc, #48]	@ (8000310 <__libc_init_array+0x44>)
 80002e0:	f000 f818 	bl	8000314 <_init>
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	2600      	movs	r6, #0
 80002ea:	42a6      	cmp	r6, r4
 80002ec:	d105      	bne.n	80002fa <__libc_init_array+0x2e>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f4:	4798      	blx	r3
 80002f6:	3601      	adds	r6, #1
 80002f8:	e7ee      	b.n	80002d8 <__libc_init_array+0xc>
 80002fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fe:	4798      	blx	r3
 8000300:	3601      	adds	r6, #1
 8000302:	e7f2      	b.n	80002ea <__libc_init_array+0x1e>
 8000304:	0800032c 	.word	0x0800032c
 8000308:	0800032c 	.word	0x0800032c
 800030c:	0800032c 	.word	0x0800032c
 8000310:	08000330 	.word	0x08000330

08000314 <_init>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr

08000320 <_fini>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr
